Instruction,Type,Opcode,Funct3,Funct7,BitConstraint,Action1,Action2,Remark
add,R,0x33,0x0,0x00,,"t1, t2:=r.Load(rs1), r.Load(rs2); r.Store(rd, t1 + t2);",*pc += 4;,
mul,R,0x33,0x0,0x01,,"t1, t2:=r.Load(rs1), r.Load(rs2); _,lo:=bits.Mul64(t1,t2); r.Store(rd, lo);",*pc += 4;,signed x signed
sub,R,0x33,0x0,0x20,,"t1, t2:=r.Load(rs1), r.Load(rs2); r.Store(rd, t1 - t2);",*pc += 4;,
sll,R,0x33,0x1,0x00,,"t1, t2:=r.Load(rs1), r.Load(rs2); r.Store(rd, t1 << t2);",*pc += 4;,
mulh,R,0x33,0x1,0x01,,"t1, t2:=r.Load(rs1), r.Load(rs2); hi,_:=bits.Mul64(t1,t2); r.Store(rd, hi);",*pc += 4;,signed x signed
slt,R,0x33,0x2,0x00,,"t1, t2:=int64(r.Load(rs1)), int64(r.Load(rs2)); if t1<t2 {r.Store(rd, 1)} else{r.Store(rd, 0)};",*pc += 4;,signed
xor,R,0x33,0x4,0x00,,"t1, t2:=r.Load(rs1), r.Load(rs2); r.Store(rd, t1 ^ t2);",*pc += 4;,
div,R,0x33,0x4,0x01,,"t1, t2:=int64(r.Load(rs1)), int64(r.Load(rs2)); if t2==0 {r.Store(rd, bit_utils.SignExtU64(-1))} else if t1==-(1<<(XLEN-1)) && t2==-1 {r.Store(rd, uint64(1)<<(XLEN-1))} else {r.Store(rd, uint64(t1 / t2))}",*pc += 4;,signed
srl,R,0x33,0x5,0x00,,"t1, t2:=r.Load(rs1), r.Load(rs2); r.Store(rd, t1 >> t2);",*pc += 4;,logical right shift
sra,R,0x33,0x5,0x20,,"t1, t2:=r.Load(rs1), r.Load(rs2); v:=int64(t1)>>t2;r.Store(rd, uint64(v));",*pc += 4;,arithmetic right shift
or,R,0x33,0x6,0x00,,"t1, t2:=r.Load(rs1), r.Load(rs2); r.Store(rd, t1 | t2);",*pc += 4;,
rem,R,0x33,0x6,0x01,,"t1, t2:=int64(r.Load(rs1)), int64(r.Load(rs2)); if t2==0 {r.Store(rd, uint64(t1))} else if t1==-(1<<(XLEN-1)) && t2==-1 {r.Store(rd, 0)} else {r.Store(rd, uint64(t1 % t2))}",*pc += 4;,signed
and,R,0x33,0x7,0x00,,"t1, t2:=r.Load(rs1), r.Load(rs2); r.Store(rd, t1 & t2);",*pc += 4;,
lb,I,0x03,0x0,,,"t1:=r.Load(rs1); v:= uint64(int64(int8(m.LoadU8(t1 + bit_utils.SignExtU64(imm))))); r.Store(rd, v);",*pc += 4;,
lh,I,0x03,0x1,,,"t1:=r.Load(rs1); v:= uint64(int64(int16(m.LoadU16(t1 + bit_utils.SignExtU64(imm))))); r.Store(rd, v);",*pc += 4;,
lw,I,0x03,0x2,,,"t1:=r.Load(rs1); v:= uint64(int64(int32(m.LoadU32(t1 + bit_utils.SignExtU64(imm))))); r.Store(rd, v);",*pc += 4;,
ld,I,0x03,0x3,,,"t1:=r.Load(rs1); v:= uint64(int64(m.LoadU64(t1 + bit_utils.SignExtU64(imm)))); r.Store(rd, v);",*pc += 4;,
addi,I,0x13,0x0,,,"t1:=r.Load(rs1); r.Store(rd, t1 + bit_utils.SignExtU64(imm));",*pc += 4;,
slli,I,0x13,0x1,,"[3]uint32{26, 31, 0}","t1:=r.Load(rs1); r.Store(rd, t1 << bit_utils.U32Bits(uint32(imm), 0, 5))",*pc += 4;,
slti,I,0x13,0x2,,,"t1:=int64(r.Load(rs1)); if t1 < int64(imm) { r.Store(rd, 1)} else {r.Store(rd,0)} ",*pc += 4;,
xori,I,0x13,0x4,,,"t1:=r.Load(rs1); r.Store(rd, t1 ^ bit_utils.SignExtU64(imm));",*pc += 4;,
srli,I,0x13,0x5,,"[3]uint32{26, 31, 0}","t1:=r.Load(rs1); r.Store(rd, t1 >> bit_utils.U32Bits(uint32(imm), 0, 5))",*pc += 4;,
srai,I,0x13,0x5,,"[3]uint32{26, 31, 0x10}","t1:=int64(r.Load(rs1)); r.Store(rd, uint64(t1 >>bit_utils.U32Bits(uint32(imm), 0, 5)))",*pc += 4;,
ori,I,0x13,0x6,,,"t1:=r.Load(rs1); r.Store(rd, t1 | bit_utils.SignExtU64(imm));",*pc += 4;,
andi,I,0x13,0x7,,,"t1:=r.Load(rs1); r.Store(rd, t1 & bit_utils.SignExtU64(imm));",*pc += 4;,
addiw,I,0x1B,0x0,,,"t1:=r.Load(rs1); r.Store(rd, bit_utils.SignExtU64(int32(t1) + imm))",*pc += 4;,
jalr,I,0x67,0x0,,,"r.Store(rd, *pc + 4);","*pc = bit_utils.SetBit(r.Load(rs1) + bit_utils.SignExtU64(imm), 0, 0);",
sb,S,0x23,0x0,,,"t1,t2:=r.Load(rs1),r.Load(rs2);addr:=t1+bit_utils.SignExtU64(imm); m.StoreU8(addr, uint8(t2));",*pc += 4;,
sh,S,0x23,0x1,,,"t1,t2:=r.Load(rs1),r.Load(rs2);addr:=t1+bit_utils.SignExtU64(imm); m.StoreU16(addr, uint16(t2));",*pc += 4;,
sw,S,0x23,0x2,,,"t1,t2:=r.Load(rs1),r.Load(rs2);addr:=t1+bit_utils.SignExtU64(imm); m.StoreU32(addr, uint32(t2));",*pc += 4;,
sd,S,0x23,0x3,,,"t1,t2:=r.Load(rs1),r.Load(rs2);addr:=t1+bit_utils.SignExtU64(imm); m.StoreU64(addr, t2);",*pc += 4;,
beq,B,0x63,0x0,,,"t1, t2:=r.Load(rs1), r.Load(rs2)",if t1==t2 {*pc+= bit_utils.SignExtU64(imm<<1)} else {*pc += 4},
bne,B,0x63,0x1,,,"t1, t2:=r.Load(rs1), r.Load(rs2)",if t1!=t2 {*pc+= bit_utils.SignExtU64(imm<<1)} else {*pc += 4},
blt,B,0x63,0x4,,,"t1, t2:=int64(r.Load(rs1)), int64(r.Load(rs2));",if t1<t2 {*pc+= bit_utils.SignExtU64(imm<<1)} else {*pc += 4},signed
bge,B,0x63,0x5,,,"t1, t2:=int64(r.Load(rs1)), int64(r.Load(rs2));",if t1>=t2 {*pc+= bit_utils.SignExtU64(imm<<1)} else {*pc += 4},signed
auipc,U,0x17,,,,"r.Store(rd, *pc + (bit_utils.SignExtU64(imm)<<12));",*pc += 4;,
lui,U,0x37,,,,"r.Store(rd, bit_utils.SignExtU64(imm)<<12);",*pc += 4;,
jal,J,0x6f,,,,"r.Store(rd, *pc + 4);",*pc += bit_utils.SignExtU64(imm) << 1,
